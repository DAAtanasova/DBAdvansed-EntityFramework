Problem 1.	Define a class Person
Define a class Person with public properties for Name and Age. 

Problem 2.	Creating Constructors
Add 3 constructors to the Person class from the last task, use constructor chaining to reuse code:
1.	The first should take no arguments and produce a person with name “No name” and age = 1. 
2.	The second should accept only an integer number for the age and produce a person with name “No name” and age equal to the passed parameter.
3.	The third one should accept a string for the name and an integer for the age and should produce a person with the given name and age.

Problem 3.	Opinion Poll
Using the Person class, write a program that reads from the console N lines of personal information and then prints all people whose age is more than 30 years, sorted in alphabetical order.

Problem 4.	Speed Racing
Your task is to implement a program that keeps track of cars and their fuel and supports methods for moving the cars. Define a class Car that keeps track of a car’s Model, fuel amount, fuel consumption for 1 kilometer and distance traveled. A Car’s Model is unique - there will never be 2 cars with the same model.
 On the first line of the input you will receive a number N – the number of cars you need to track, on each of the next N lines you will receive information for a car in the following format “<Model> <FuelAmount> <FuelConsumptionFor1km>”, all cars start at 0 kilometers traveled.
After the N lines, until the command “End” is received, you will receive a command in the following format “Drive <CarModel>  <amountOfKm>”. Implement a method in the Car class to calculate whether a car can move that distance. If it can the car’s fuel amount should be reduced by the amount of used fuel and its distance traveled should be increased by the amount of kilometers traveled, otherwise the car should not move (Its fuel amount and distance traveled should stay the same) and you should print on the console “Insufficient fuel for the drive”. After the “End” command is received, print each car and its current fuel amount and distance traveled in the format “<Model> <fuelAmount>  <distanceTraveled>”, where the fuel amount should be printed to two decimal places after the separator.

Problem 5.	Company Roster
Define a class Employee that holds the following information: name, salary, position, department, email and age. The name, salary, position and department are mandatory while the rest are optional. 
Your task is to write a program which takes N lines of employees from the console and calculates the department with the highest average salary and prints for each employee in that department his name, salary, email and age – sorted by salary in descending order. If an employee doesn’t have an email – in place of that field you should print “n/a” instead, if he doesn’t have an age – print “-1” instead. The salary should be printed to two decimal places after the seperator.

